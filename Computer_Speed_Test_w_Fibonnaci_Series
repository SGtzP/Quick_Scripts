# -*- coding: utf-8 -*-
"""
Created on Thu Jun  5 18:00:01 2025

@author: salvador
"""

import psutil
import time
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
import os

def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def monitor_resources():
    # Get CPU and memory usage
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    memory_usage = memory_info.percent

    return cpu_usage, memory_usage

def run_algorithm_and_monitor(n):
    start_time = time.time()

    # Run the algorithm
    fibonacci(n)

    end_time = time.time()
    time_taken = end_time - start_time

    # Monitor resources after running the algorithm
    cpu_usage, memory_usage = monitor_resources()

    return time_taken, cpu_usage, memory_usage

def plot_results(ns, times, cpu_usages, memory_usages):
    plt.figure(figsize=(12, 6))

    plt.subplot(1, 3, 1)
    plt.plot(ns, times, marker='o')
    plt.title('Time Taken')
    plt.xlabel('n')
    plt.ylabel('Time (seconds)')

    plt.subplot(1, 3, 2)
    plt.plot(ns, cpu_usages, marker='o', color='orange')
    plt.title('CPU Usage')
    plt.xlabel('n')
    plt.ylabel('CPU Usage (%)')

    plt.subplot(1, 3, 3)
    plt.plot(ns, memory_usages, marker='o', color='green')
    plt.title('Memory Usage')
    plt.xlabel('n')
    plt.ylabel('Memory Usage (%)')

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    ns = range(1, 51) # Will run Fibonacci(5) to Fibonacci(10) if ns = range(5, 11)
    times = []
    cpu_usages = []
    memory_usages = []

    for n in ns:
        print(f"Running Fibonacci({n})...")
        time_taken, cpu_usage, memory_usage = run_algorithm_and_monitor(n)
        times.append(time_taken)
        cpu_usages.append(cpu_usage)
        memory_usages.append(memory_usage)

    plot_results(ns, times, cpu_usages, memory_usages)
    
# -------------------------------
# Save Results to CSV with Date
# -------------------------------
# Create a DataFrame with the results
    results_df = pd.DataFrame({
        'n': ns,
        'Time_Taken_sec': times,
        'CPU_Usage_percent': cpu_usages,
        'Memory_Usage_percent': memory_usages
    })
    
    # Define the folder path where you want to save the file
    folder_path = r'D:\sgtzp\OneDrive\Python\\Computer_Test_and_Series'  # Use raw string to avoid backslash issues
    
    # Ensure the folder exists
    os.makedirs(folder_path, exist_ok=True)
    
    # Generate a filename with the current date
    current_date = datetime.now().strftime("%Y-%m-%d")
    file_name = f"fibonacci_results_{current_date}.csv"
    
    # Create full file path
    file_path = os.path.join(folder_path, file_name)
    
    # Save to CSV
    results_df.to_csv(file_path, index=False)
    print(f"Results saved to {file_path}")
        
